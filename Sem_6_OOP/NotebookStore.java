package Sem_6_OOP;
/*üìå–ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–ª–∞—Å—Å–∞ –ù–æ—É—Ç–±—É–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏ - –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ java.
üìå–°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ—É—Ç–±—É–∫–æ–≤.
üìå–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–π (–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏) —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–≤–µ–¥–µ—Ç –Ω–æ—É—Ç–±—É–∫–∏,
–æ—Ç–≤–µ—á–∞—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—É. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ Map.
–ù–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é:
1 - –û–ó–£
2 - –û–±—ä–µ–º –ñ–î
3 - –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
4 - –¶–≤–µ—Ç ...
üìå–î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤ Map.
üìå–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ—É—Ç–±—É–∫–∏ –∏—Ö –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –ø–æ —É—Å–ª–æ–≤–∏—è–º.*/
import java.util.*;

// –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ—É—Ç–±—É–∫–∞
class Notebook {
    private String model;
    private int ram; // –û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    private int storage; // –û–±—ä–µ–º –∂–µ—Å—Ç–∫–æ–≥–æ –¥–∏—Å–∫–∞
    private String os; // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    private String color;

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–æ—É—Ç–±—É–∫–∞
    public Notebook(String model, int ram, int storage, String os, String color) {
        this.model = model;
        this.ram = ram;
        this.storage = storage;
        this.os = os;
        this.color = color;
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –Ω–æ—É—Ç–±—É–∫–∞
    public String getModel() {
        return model;
    }

    public int getRam() {
        return ram;
    }

    public int getStorage() {
        return storage;
    }

    public String getOs() {
        return os;
    }

    public String getColor() {
        return color;
    }

    @Override
    public String toString() {
        return "Notebook{" +
                "model='" + model + '\'' +
                ", ram=" + ram +
                "GB, storage=" + storage +
                "GB, os='" + os + '\'' +
                ", color='" + color + '\'' +
                '}';
    }
}

public class NotebookStore {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ—É—Ç–±—É–∫–æ–≤
        Set<Notebook> notebooks = new HashSet<>();
        notebooks.add(new Notebook("Dell", 16, 512, "Windows 11", "Silver"));
        notebooks.add(new Notebook("MacBook", 32, 512, "macOS", "Gray"));
        notebooks.add(new Notebook("HP", 16, 1_024, "Windows 10", "Black"));
        notebooks.add(new Notebook("Asus", 8, 256, "Windows 10", "Blue"));
        notebooks.add(new Notebook("Lenovo", 16, 512, "Windows 11", "Black"));
        notebooks.add(new Notebook("Acer", 16, 1_024, "Windows 11", "Silver"));
        notebooks.add(new Notebook("Huawei", 8, 512, "Windows 10", "Gray"));

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ—É—Ç–±—É–∫–æ–≤
        filterNotebooks(notebooks);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ—É—Ç–±—É–∫–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    public static void filterNotebooks(Set<Notebook> notebooks) {
        Scanner scanner = new Scanner(System.in);
        Map<Integer, String> filters = new HashMap<>();
        filters.put(1, "RAM (8, 16, 32)");
        filters.put(2, "Storage (256, 512, 1024)");
        filters.put(3, "OS (Windows 10, Windows 11, macOS)");
        filters.put(4, "Color (Black, Gray, Silver)");

        Map<String, Integer> criteria = new HashMap<>();
        for (Map.Entry<Integer, String> entry : filters.entrySet()) {
            System.out.println(entry.getKey() + " - " + entry.getValue());
        }
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫—Ä–∏—Ç–µ—Ä–∏—é:");

        int choice = scanner.nextInt();
        scanner.nextLine(); // –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏

        if (choice == 1 || choice == 2) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è " + filters.get(choice) + ":");
            int minVal = scanner.nextInt();
            for (Notebook notebook : notebooks) {
                if ((choice == 1 && notebook.getRam() >= minVal) ||
                        (choice == 2 && notebook.getStorage() >= minVal)) {
                    System.out.println(notebook);
                }
            }
        } else if (choice == 3 || choice == 4) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è " + filters.get(choice) + ":");
            String filterValue = scanner.nextLine().trim();
            for (Notebook notebook : notebooks) {
                if ((choice == 3 && notebook.getOs().equalsIgnoreCase(filterValue)) ||
                        (choice == 4 && notebook.getColor().equalsIgnoreCase(filterValue))) {
                    System.out.println(notebook);
                }
            }
        } else {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è.");
        }
        scanner.close();
    }
}

